import { inspect } from 'util';
import { Logger } from '../logger.js';
import { SafeString } from '../util.js';
import { exceptionContext } from '../util.js';
import DOM from '@mojojs/dom';
/**
 * Default helper plugin.
 */
export default function defaultHelpersPlugin(app) {
    app.addHelper('exception', exception);
    app.addHelper('htmlException', htmlException);
    app.addHelper('htmlNotFound', htmlNotFound);
    app.addHelper('httpException', httpException);
    app.addHelper('jsonException', jsonException);
    app.addHelper('jsonNotFound', jsonNotFound);
    app.addHelper('txtException', txtException);
    app.addHelper('txtNotFound', txtNotFound);
    app.addHelper('notFound', notFound);
    app.addHelper('websocketException', websocketException);
    app.addHelper('currentRoute', currentRoute);
    app.addHelper('include', include);
    app.addHelper('linkTo', linkTo);
    app.addHelper('mojoFaviconTag', mojoFaviconTag);
    app.addHelper('scriptTag', scriptTag);
    app.addHelper('styleTag', styleTag);
    app.addHelper('tag', tag);
    app.decorateContext('inspect', (object, options) => inspect(object, options));
}
function currentRoute(ctx) {
    const plan = ctx.plan;
    if (plan === null)
        return null;
    const endpoint = plan.endpoint;
    if (endpoint === undefined)
        return null;
    return endpoint.customName ?? endpoint.defaultName ?? null;
}
async function exception(ctx, error) {
    if (ctx.isWebSocket)
        return ctx.websocketException(error);
    return ctx.httpException(error);
}
async function htmlException(ctx, error) {
    ctx.stash.exception = error;
    const mode = ctx.app.mode;
    if (await ctx.render({ view: `exception.${mode}`, maybe: true, status: 500 }))
        return true;
    if (await ctx.render({ view: 'exception', maybe: true, status: 500 }))
        return true;
    const view = mode === 'development' ? 'mojo/debug' : 'mojo/exception';
    return await ctx.render({ view, status: 500, stringFormatter: Logger.stringFormatter, exceptionContext });
}
async function htmlNotFound(ctx) {
    ctx.stash.exception = null;
    const mode = ctx.app.mode;
    if (await ctx.render({ view: `not-found.${mode}`, maybe: true, status: 404 }))
        return true;
    if (await ctx.render({ view: 'not-found', maybe: true, status: 404 }))
        return true;
    const view = mode === 'development' ? 'mojo/debug' : 'mojo/not-found';
    return await ctx.render({ view, status: 404, stringFormatter: Logger.stringFormatter });
}
async function httpException(ctx, error) {
    error = ensureError(error);
    ctx.log.error(error.stack);
    const exceptionFormat = ctx.exceptionFormat;
    if (exceptionFormat === 'txt')
        return ctx.txtException(error);
    if (exceptionFormat === 'json')
        return ctx.jsonException(error);
    return ctx.htmlException(error);
}
async function include(ctx, options, stash) {
    return await ctx.renderToString(options, stash);
}
async function jsonException(ctx, error) {
    if (ctx.app.mode === 'development') {
        return await ctx.render({
            json: {
                error: {
                    message: error.message,
                    name: error.name,
                    stack: error.stack ?? ''
                }
            },
            pretty: true,
            status: 500
        });
    }
    return await ctx.render({ json: { error: { message: 'Internal Server Error' } }, pretty: true, status: 500 });
}
async function jsonNotFound(ctx) {
    return await ctx.render({ json: { error: { message: 'Not Found' } }, pretty: true, status: 404 });
}
function linkTo(ctx, target, attrs, content) {
    const href = ctx.urlFor(target);
    return ctx.tag('a', { href, ...attrs }, content);
}
function mojoFaviconTag(ctx) {
    return ctx.tag('link', { rel: 'icon', href: ctx.urlForFile('/mojo/favicon.ico') });
}
async function notFound(ctx) {
    const exceptionFormat = ctx.exceptionFormat;
    if (exceptionFormat === 'txt')
        return ctx.txtNotFound();
    if (exceptionFormat === 'json')
        return ctx.jsonNotFound();
    return ctx.htmlNotFound();
}
function scriptTag(ctx, target) {
    return ctx.tag('script', { src: ctx.urlForFile(target) });
}
function styleTag(ctx, target) {
    return ctx.tag('link', { rel: 'stylesheet', href: ctx.urlForFile(target) });
}
function tag(ctx, name, attrs = {}, content = '') {
    return new SafeString(DOM.newTag(name, attrs, content).toString());
}
async function txtException(ctx, error) {
    if (ctx.app.mode === 'development') {
        return await ctx.render({ text: error.stack, status: 500 });
    }
    return await ctx.render({ text: 'Internal Server Error', status: 500 });
}
async function txtNotFound(ctx) {
    return await ctx.render({ text: 'Not Found', status: 404 });
}
async function websocketException(ctx, error) {
    error = ensureError(error);
    ctx.log.error(error.stack);
    const ws = ctx.ws;
    if (ws !== null && ctx.isEstablished)
        ws.close(1011);
    return true;
}
// If you see this then your code has thrown something that was not an Error object
function ensureError(error) {
    return error instanceof Error ? error : new Error(error);
}
//# sourceMappingURL=default-helpers.js.map