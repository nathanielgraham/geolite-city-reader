/// <reference types="node" />
import type { JSONValue } from './types.js';
import type { Mode } from 'fs';
import { setTimeout } from 'timers/promises';
export { SafeString } from '@mojojs/template';
declare type FixOptions = {
    author?: string;
    dependencies?: Record<string, string>;
    description?: string;
    devDependencies?: Record<string, string>;
    exports?: string;
    files?: string[];
    license?: string;
    name?: string;
    scripts?: Record<string, string>;
    version?: string;
};
/**
 * Capture STDOUT/STDERR output.
 */
export declare function captureOutput(fn: () => Promise<void> | void, options?: {
    stderr?: boolean;
    stdout?: boolean;
}): Promise<string | Buffer>;
/**
 * Create directory for generator commands.
 */
export declare function cliCreateDir(path: string): Promise<void>;
/**
 * Create file for generator commands.
 */
export declare function cliCreateFile(path: string, template: string, values?: Record<string, any>, options?: {
    chmod?: Mode;
}): Promise<void>;
/**
 * Fix package.json file for generator commands.
 */
export declare function cliFixPackage(options?: FixOptions): Promise<void>;
/**
 * Decode URI component, but do not throw an exception if it fails.
 */
export declare function decodeURIComponentSafe(value: string): string | null;
/**
 * Generate exception context.
 */
export declare function exceptionContext(error: Error, options?: {
    lines?: number;
}): Promise<{
    file: string;
    line: number;
    column: number;
    source: Array<{
        num: number;
        code: string;
    }>;
} | null>;
/**
 * JSON pointers.
 */
export declare function jsonPointer(value: JSONValue, pointer: string): JSONValue | undefined;
/**
 * Load modules.
 */
export declare function loadModules(dirs: string[]): Promise<Record<string, any>>;
/**
 * Sleep asynchronously.
 */
export declare const sleep: typeof setTimeout;
/**
 * Tablify data structure.
 */
export declare function tablify(rows?: string[][]): string;
/**
 * Escape all POSIX control characters except for `\n`.
 */
export declare function termEscape(value: string): string;
