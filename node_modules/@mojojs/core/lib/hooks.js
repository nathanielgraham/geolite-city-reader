/**
 * Hook class.
 */
export class Hooks {
    constructor() {
        this._hooks = {};
    }
    /**
     * Add hook.
     */
    addHook(name, fn) {
        if (this._hooks[name] === undefined)
            this._hooks[name] = [];
        this._hooks[name].push(fn);
    }
    /**
     * Run hook.
     */
    async runHook(name, ...args) {
        if (this._hooks[name] === undefined)
            return await Promise.resolve();
        return await this._prepareHook(this._hooks[name])(...args);
    }
    _prepareHook(chain) {
        return async function hook(...args) {
            return await next(0);
            async function next(i, result) {
                const fn = chain[i];
                if (result !== undefined || fn === undefined)
                    return result;
                return await new Promise(resolve => resolve(fn(...args))).then(next.bind(null, i + 1));
            }
        };
    }
}
//# sourceMappingURL=hooks.js.map