/// <reference types="node" />
import type { JSONValue } from './types.js';
import type { WriteStream } from 'fs';
interface LogContext {
    requestId?: string;
    [key: string]: JSONValue | undefined;
}
interface LogEvent extends LogContext {
    level: string;
    time: string;
    msg: string;
}
declare type LogFormatter = (data: LogEvent) => string;
/**
 * A simple logger class.
 */
export declare class Logger {
    /**
     * Log destination stream.
     */
    destination: NodeJS.WritableStream;
    /**
     * Log formatter.
     */
    formatter: LogFormatter;
    /**
     * The last few logged messages.
     */
    history: LogEvent[];
    _historySize: number;
    _level: number;
    constructor(options?: {
        destination?: WriteStream;
        formatter?: LogFormatter;
        historySize?: number;
        level?: string;
    });
    /**
     * Create a child logger that will include context information with every log message.
     */
    child(context: LogContext): ChildLogger;
    /**
     * Log formatter with color highlighting.
     */
    static colorFormatter(data: LogEvent): string;
    /**
     * Log `debug` message.
     */
    debug(msg: string, context?: LogContext): void;
    /**
     * Log formatter without color highlighting.
     */
    static stringFormatter(data: LogEvent): string;
    /**
     * Log formatter for systemd.
     */
    static systemdFormatter(data: LogEvent): string;
    /**
     * Log `error` message.
     */
    error(msg: string, context?: LogContext): void;
    /**
     * Log `fatal` message.
     */
    fatal(msg: string, context?: LogContext): void;
    /**
     * Log `infor` message.
     */
    info(msg: string, context?: LogContext): void;
    /**
     * JSON log formatter.
     */
    static jsonFormatter(data: LogEvent): string;
    /**
     * Currently active log level.
     */
    get level(): string;
    set level(level: string);
    /**
     * Log `trace` message.
     */
    trace(msg: string, context?: LogContext): void;
    /**
     * Log `warn` message.
     */
    warn(msg: string, context?: LogContext): void;
    _log(level: string, msg: string, context?: LogContext): void;
}
/**
 * Child logger class.
 */
export declare class ChildLogger {
    parent: Logger;
    context: LogContext;
    constructor(parent: Logger, context: LogContext);
    /**
     * Log `debug` message.
     */
    debug(msg: string): void;
    /**
     * Log `error` message.
     */
    error(msg: string): void;
    /**
     * Log `fatal` message.
     */
    fatal(msg: string): void;
    /**
     * Log `info` message.
     */
    info(msg: string): void;
    /**
     * Log `trace` message.
     */
    trace(msg: string): void;
    /**
     * Log `warn` message.
     */
    warn(msg: string): void;
}
export {};
