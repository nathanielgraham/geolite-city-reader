/// <reference types="node" />
/// <reference types="tap" />
import type { App } from './app.js';
import type { Context } from './context.js';
import type { ValidatorResult } from './validator/result.js';
import type { Agent } from 'http';
import type { Readable } from 'stream';
import type { CookieJar } from 'tough-cookie';
import type { URL } from 'url';
export declare type Expand<T> = T extends infer O ? {
    [K in keyof O]: O[K];
} : never;
export declare type ExpandRecursive<T> = T extends infer O ? {
    [K in keyof O]: ExpandRecursive<O[K]>;
} : never;
export declare type JSONValue = string | number | boolean | null | JSONValue[] | {
    [key: string]: JSONValue;
};
export declare type JSONObject = {
    [key: string]: JSONValue;
};
export declare type MojoApp = App;
export interface MojoContext extends Context {
    [key: string]: any;
}
export declare type MojoAction = (ctx: MojoContext, ...args: any[]) => any;
export declare type AnyArguments = Array<string | string[] | MojoAction | Record<string, string[] | RegExp>>;
export declare type RouteArguments = Array<string | MojoAction | Record<string, string[] | RegExp>>;
export declare type PlaceholderType = RegExp | string | string[];
export interface SessionData {
    expiration?: number;
    expires?: number;
    flash?: {
        [key: string]: any;
    };
    nextFlash?: {
        [key: string]: any;
    };
    [key: string]: any;
}
export interface AppOptions {
    config?: Record<string, any>;
    exceptionFormat?: string;
    detectImport?: boolean;
    mode?: string;
    secrets?: string[];
}
export interface ConfigOptions {
    ext?: string;
    file?: string;
}
export interface CookieOptions {
    domain?: string;
    expires?: Date;
    httpOnly?: boolean;
    maxAge?: number;
    path?: string;
    sameSite?: 'lax' | 'strict' | 'none';
    secure?: boolean;
}
export interface RenderOptions {
    engine?: string;
    format?: string;
    inline?: string;
    inlineLayout?: string;
    json?: JSONValue;
    layout?: string;
    maybe?: boolean;
    pretty?: boolean;
    status?: number;
    text?: string;
    variant?: string;
    view?: string;
    [key: string]: any;
}
export interface ServerOptions {
    cluster?: boolean;
    headersTimeout?: number;
    keepAliveTimeout?: number;
    listen?: string[];
    maxRequestsPerSocket?: number;
    quiet?: boolean;
    requestTimeout?: number;
    reverseProxy?: boolean;
    workers?: number;
}
export interface ServerRequestOptions {
    body: Readable;
    headers: string[];
    isSecure: boolean;
    isWebSocket: boolean;
    method?: string;
    remoteAddress?: string;
    reverseProxy: boolean;
    url?: string;
}
export interface UserAgentOptions {
    baseURL?: string | URL;
    cookieJar?: CookieJar;
    maxRedirects?: number;
    name?: string;
}
interface SharedUserAgentRequestOptions {
    auth?: string;
    headers?: Record<string, string>;
    query?: Record<string, string>;
    url?: string | URL;
}
export interface UserAgentRequestOptions extends SharedUserAgentRequestOptions {
    agent?: Agent;
    ca?: string | string[] | Buffer | Buffer[];
    body?: string | Buffer | NodeJS.ReadableStream;
    form?: Record<string, string>;
    formData?: Record<string, string> | FormData;
    insecure?: boolean;
    json?: JSONValue;
    method?: string;
    servername?: string;
}
export interface UserAgentWebSocketOptions extends SharedUserAgentRequestOptions {
    json?: boolean;
    protocols?: string[];
}
export declare type TestUserAgentOptions = UserAgentOptions & {
    tap?: Tap.Tap;
};
export interface ValidationError {
    instancePath: string;
    message?: string;
    schemaPath: string;
}
export declare type ValidatorFunction = (data: JSONObject) => ValidatorResult;
export {};
